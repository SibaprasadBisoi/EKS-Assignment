pipeline {
    agent any

    environment {
        // Set AWS and EKS configuration
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '<aws-account-id>'
        EKS_CLUSTER_NAME = '<eks-cluster-name>'
        ECR_REPO_NAME = '<ecr-repo-name>'
        KUBECONFIG = "${JENKINS_HOME}/.kube/config"  // Path to your kubectl config
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Log in to ECR
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                    // Build and tag your Docker image
                    sh "docker build -t ${ECR_REPO_NAME}:latest ."

                    // Push the Docker image to ECR
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:latest"
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Authenticate with EKS cluster
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}"

                    // Deploy your Kubernetes manifests (replace 'kubectl apply' with your deployment command)
                    sh "kubectl apply -f apps/frontned/frontend.yml"
                }
            }
        }
    }

    post {
        success {
            // Clean up resources, notifications, etc.
        }
    }
}
